# This workflow will build and push a new container image to Dockerhub,
# and then will deploy to AWS EKS cluster, when there is a push to the "dev" branch.
#

name: Deploy products to Amazon EKS

on:
  push:
    branches: [ "dev" ]

env:
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  
  DOCKER_REPOSITORY: syriail
  IMAGE_NAME: commerce-products

permissions:
  contents: read

jobs:
  build-and-publish:
    name: Build and Publish image
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle
          
      - name: build application
        run: ./gradlew build --stacktrace
        
      - name: Create docker image tag
        id: dockerImageTag
        run: echo "::set-output name=tag::$(date '+%Y%m%d%H%M%S')-${{ github.sha }}"
        
      - name: Publish docker image
        env: 
          DOCKER_IMAGE_TAG: ${{steps.dockerImageTag.outputs.tag}}
        run: |
          docker build -t commerce-products .
          docker tag commerce-products ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG}
          docker tag commerce-products ${DOCKER_REPOSITORY}/${IMAGE_NAME}:latest
          echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker push ${DOCKER_REPOSITORY}/${IMAGE_NAME}:${DOCKER_IMAGE_TAG}
          docker push ${DOCKER_REPOSITORY}/${IMAGE_NAME}:latest
      
  deploy:
    name: Deploy
    needs: build-and-publish
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configure Kubectl
      uses: azure/setup-kubectl@v2.0
      id: install
    
    - name: Update KubeConfig
      shell: bash
      run: |
        aws eks update-kubeconfig --name ${{ secrets.AWS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --role-arn ${{secrets.AWS_ROLE_TO_ASSUME}}
    - name: Rollout new image
      shell: bash
      run: |
        kubectl set image deployments/products=${DOCKER_REPOSITORY}/${IMAGE_NAME}:latest
